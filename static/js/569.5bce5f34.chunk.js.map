{"version":3,"file":"static/js/569.5bce5f34.chunk.js","mappings":"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","sources":["../node_modules/@vidstack/react/dist/prod/chunks/vidstack-DShZT0NX.js"],"sourcesContent":["\"use client\"\n\nimport { l as listen, d as IS_CHROME, e as IS_IOS, f as canGoogleCastSrc, g as coerceToError, I as IS_SERVER, h as loadScript } from './vidstack-BRXztYRL.js';\nimport { p as peek, D as DOMEvent } from './vidstack-BNPvxaQh.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  return defaultMessage;\n}\nfunction listenCastContextEvent(type, handler) {\n  return listen(getCastContext(), type, handler);\n}\n\nclass GoogleCastLoader {\n  constructor() {\n    this.name = \"google-cast\";\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let openEvent;\n    try {\n      const loadEvent = await this.wm(ctx);\n      if (!this.ba) {\n        this.ba = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.ba);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.Nl(ctx, \"connecting\", openEvent);\n      await this.xm(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected())\n        this.Nl(ctx, \"connected\", openEvent);\n    } catch (message) {\n      const error = coerceToError(message);\n      this.Nl(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        new DOMEvent(\"google-cast-prompt-error\", { detail: error })\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: openEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (IS_SERVER) {\n      throw Error(\"[vidstack] can not load google cast provider server-side\");\n    }\n    if (!this.ba) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('./vidstack-Cxyb4r5N.js')).GoogleCastProvider(this.ba, ctx);\n  }\n  async wm(ctx) {\n    if (hasLoadedCastFramework())\n      return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw Error(\n        \"Cast not available.\"\n      );\n    }\n    return loadedEvent;\n  }\n  async xm(options) {\n    this.ym(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode)\n      throw Error(getCastErrorMessage(errorCode));\n  }\n  ym(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  Nl(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.delegate.c(\"remote-playback-change\", detail, trigger);\n  }\n}\n\nvar loader = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GoogleCastLoader: GoogleCastLoader\n});\n\nexport { getCastContext as a, getCastSession as b, getCastErrorMessage as c, loader as d, getCastSessionMedia as g, hasActiveCastSession as h, listenCastContextEvent as l };\n"],"names":["isCastConnected","getCastContext","getCastState","cast","framework","CastState","CONNECTED","window","CastContext","getInstance","getCastSession","getCurrentSession","getCastSessionMedia","_getCastSession","getSessionObj","media","hasActiveCastSession","src","_getCastSessionMedia","contentId","getCastErrorMessage","code","concat","listenCastContextEvent","type","handler","listen","loader","Object","freeze","__proto__","GoogleCastLoader","constructor","this","name","mediaType","canPlay","IS_CHROME","IS_IOS","canGoogleCastSrc","prompt","ctx","openEvent","_getCastSession2","loadEvent","wm","ba","RemotePlayer","RemotePlayerController","player","createEvent","trigger","dispatchEvent","Nl","xm","peek","$props","googleCast","$state","remotePlaybackInfo","set","deviceName","getCastDevice","friendlyName","message","error","coerceToError","DOMEvent","detail","dispatch","load","IS_SERVER","Error","GoogleCastProvider","_window$cast","hasLoadedCastFramework","loadStartEvent","loadScript","customElements","whenDefined","loadedEvent","_window$chrome","chrome","isAvailable","isCastAvailable","options","ym","errorCode","requestSession","_this$cast","setOptions","language","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","resumeSavedSession","androidReceiverCompatible","state","delegate","c"],"sourceRoot":""}