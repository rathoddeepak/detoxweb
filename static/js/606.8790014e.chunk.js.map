{"version":3,"file":"static/js/606.8790014e.chunk.js","mappings":"gKAEA,MAAMA,EAAY,kHACZC,EAA8B,IAAIC,IAClCC,EAA+B,IAAID,IACzC,SAASE,EAAsBC,GAAK,IAAAC,EAClC,OAA2B,QAA3BA,EAAOD,EAAIE,MAAMP,UAAU,IAAAM,OAAA,EAApBA,EAAuB,EAChC,CACAE,eAAeC,EAAkBC,EAASC,GACxC,GAAIV,EAAYW,IAAIF,GAClB,OAAOT,EAAYY,IAAIH,GACzB,GAAIP,EAAaS,IAAIF,GACnB,OAAOP,EAAaU,IAAIH,GAC1B,MAAMI,EAAU,IAAIC,SAAQP,UAC1B,MAAMQ,EAAQ,CAAC,gBAAiB,YAAa,aAC7C,IAAK,MAAMC,KAAQD,EACjB,IAAK,MAAME,IAAQ,EAAC,GAAM,GAAQ,CAChC,MAAMC,EAAMC,EAAwBV,EAASO,EAAMC,GAInD,UAJ2EG,MAAMF,EAAK,CACpFG,KAAM,UACNC,OAAQZ,EAAMY,UAEHC,OAAS,IAGpB,OAFAvB,EAAYwB,IAAIf,EAASS,QACzBO,EAAQP,EAGZ,CACF,IACCQ,OAAM,IAAM,KAAIC,SAAQ,IAAMzB,EAAa0B,OAAOnB,KAErD,OADAP,EAAasB,IAAIf,EAASI,GACnBA,CACT,CACA,SAASM,EAAwBV,EAASO,EAAMC,GAC9C,MAAMY,EAAOZ,EAAO,OAAS,MAC7B,MAAO,uBAAPa,OAA8Bb,EAAO,UAAY,KAAI,KAAAa,OAAIrB,EAAO,KAAAqB,OAAId,EAAI,KAAAc,OAAID,EAC9E,C","sources":["../node_modules/@vidstack/react/dist/prod/chunks/vidstack-DscYSLiW.js"],"sourcesContent":["\"use client\"\n\nconst videoIdRE = /(?:youtu\\.be|youtube|youtube\\.com|youtube-nocookie\\.com)\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=|)((?:\\w|-){11})/;\nconst posterCache = /* @__PURE__ */ new Map();\nconst pendingFetch = /* @__PURE__ */ new Map();\nfunction resolveYouTubeVideoId(src) {\n  return src.match(videoIdRE)?.[1];\n}\nasync function findYouTubePoster(videoId, abort) {\n  if (posterCache.has(videoId))\n    return posterCache.get(videoId);\n  if (pendingFetch.has(videoId))\n    return pendingFetch.get(videoId);\n  const pending = new Promise(async (resolve) => {\n    const sizes = [\"maxresdefault\", \"sddefault\", \"hqdefault\"];\n    for (const size of sizes) {\n      for (const webp of [true, false]) {\n        const url = resolveYouTubePosterURL(videoId, size, webp), response = await fetch(url, {\n          mode: \"no-cors\",\n          signal: abort.signal\n        });\n        if (response.status < 400) {\n          posterCache.set(videoId, url);\n          resolve(url);\n          return;\n        }\n      }\n    }\n  }).catch(() => \"\").finally(() => pendingFetch.delete(videoId));\n  pendingFetch.set(videoId, pending);\n  return pending;\n}\nfunction resolveYouTubePosterURL(videoId, size, webp) {\n  const type = webp ? \"webp\" : \"jpg\";\n  return `https://i.ytimg.com/${webp ? \"vi_webp\" : \"vi\"}/${videoId}/${size}.${type}`;\n}\n\nexport { findYouTubePoster, resolveYouTubeVideoId };\n"],"names":["videoIdRE","posterCache","Map","pendingFetch","resolveYouTubeVideoId","src","_src$match","match","async","findYouTubePoster","videoId","abort","has","get","pending","Promise","sizes","size","webp","url","resolveYouTubePosterURL","fetch","mode","signal","status","set","resolve","catch","finally","delete","type","concat"],"sourceRoot":""}